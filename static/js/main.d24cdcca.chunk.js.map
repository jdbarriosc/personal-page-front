{"version":3,"sources":["components/navigation/NavigationBar.jsx","components/navigation/Footer.jsx","views/Home.jsx","views/Projects.jsx","Routes.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","styled","nav","NavbarContent","div","HomeLink","NavLink","LinkContainer","NavbarLinks","NavigationBar","exact","to","StyledFooter","footer","Header","h6","Footer","console","log","Date","getYear","getFullYear","Home","Circle","id","className","React","Component","Projects","YouTube","videoId","opts","height","width","playerVars","autoplay","onReady","this","_onReady","src","alt","onClick","window","open","Routes","path","component","App","Helmet","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d24cdcca.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Navbar = styled.nav`\r\n    align-items: center;\r\n    background-color: white;\r\n    padding: 0px 10%;\r\n    box-shadow: 0 0 8px var(--gray);\r\n    display: grid;\r\n    grid-template-columns: auto minmax(0px, 1300px) auto;\r\n    height: min-content;\r\n    z-index: 1;\r\n`\r\n\r\nconst NavbarContent = styled.div`\r\n    align-items: center;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    grid-column: 2;\r\n    height: min-content;\r\n    width: 100%;\r\n`\r\n\r\nconst HomeLink = styled(NavLink)`\r\n    margin-left: 30px;\r\n    h2{\r\n        color: black;\r\n        font-weight: bold;\r\n        font-size: 40px;\r\n        margin:0px;\r\n    }\r\n    text-decoration: none;\r\n\r\n`\r\n\r\nconst LinkContainer = styled.div`\r\n    align-items: center;\r\n    display: flex;\r\n    height: 80px;\r\n    margin-left: auto;\r\n`\r\n\r\nconst NavbarLinks = styled(NavLink)`\r\n    color: black;\r\n    font-weight: bold;\r\n    font-size: 25px;\r\n    line-height: 50px;\r\n    position: relative;\r\n    text-decoration: none;\r\n    margin: 0 25px;\r\n`\r\n\r\nfunction NavigationBar() {\r\n    return (\r\n        <Navbar>\r\n            <NavbarContent>\r\n                <HomeLink exact to='/'>\r\n                    <h2>jdbarrios.com</h2>\r\n                </HomeLink>\r\n                <LinkContainer>\r\n                    <NavbarLinks exact to='/'>About me</NavbarLinks>\r\n                    <NavbarLinks exact to='/projects'>Projects</NavbarLinks>\r\n                    <NavbarLinks exact to='/hobies'>Other</NavbarLinks>\r\n                </LinkContainer>\r\n            </NavbarContent>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default NavigationBar;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledFooter = styled.footer`\r\n    align-items: center;\r\n    background-color: var(--primary-dark-4);\r\n    display: flex;\r\n    min-height: 30px;\r\n    justify-content: center;\r\n`\r\n\r\nconst Header = styled.h6`\r\n    color: var(--gray-light-4);\r\n    font-size: 12px;\r\n    margin: 0;\r\n`\r\n\r\nfunction Footer() {\r\n    console.log((new Date()).getYear());\r\n    return (\r\n        <StyledFooter>\r\n            <Header>©{(new Date()).getFullYear()} Juan Diego Barrios  -    (+57) 300 514 2886   -   jdbarrios36@gmail.com</Header>\r\n        </StyledFooter>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport NavigationBar from '../components/navigation/NavigationBar';\r\nimport Footer from '../components/navigation/Footer';\r\nimport './Home.css';\r\n\r\nclass Home extends React.Component {\r\n    render() {\r\n        const Circle = styled.div`\r\n        height: 350px;\r\n        width: 350px;\r\n        background: url('/images/my-picture.png') no-repeat white 20px 0px;\r\n        background-size: 330px 400px;\r\n        box-shadow: 4px 4px  rgba(0,0,0,0.2);\r\n        -moz-box-shadow: 4px 4px  rgba(0,0,0,0.2);\r\n        -webkit-box-shadow: 4px 4px  rgba(0,0,0,0.2);\r\n        -o-box-shadow: 4px 4px  rgba(0,0,0,0.5);\r\n        border-radius: 50%;\r\n        @media only screen and (max-width: 450px) {\r\n            height: 115px;\r\n            width: 115px;\r\n            background-size: 85px 85px;\r\n\r\n        }\r\n        `\r\n        return (\r\n            <div id='view'>\r\n                <NavigationBar />\r\n                <main>\r\n                    <div id='home'>\r\n                        <div id='home-top-info'>\r\n                            <div id='home-top-info-image'>\r\n                                <Circle  />\r\n                            </div>\r\n                            <div id='home-top-info-text'>\r\n                                <h1>Juan Diego Barrios</h1>\r\n                                <h2>Bachelor in Computer Science, full stack developer and self learner...</h2>\r\n                            </div>\r\n                        </div>\r\n                        <div id='home-content'>\r\n                            <div className='home-content-section'>\r\n                                <h2>Self Description:</h2>\r\n                                <h3>I am a computer science student at Universidad de Los Andes in Colombia. I discovered my passion for programming during one of the mandatory courses in my initial program of civil engineering, in which I learned the Java language. This led me to change my major to my nowadays program of computer science. Besides my formal education at the university, I have expanded my learning process by developing several projects in collaboration with colleagues and professors that have helped me grow in experience. I am a full stack developer, I don’t mind if I am in charge of the back-end, front-end, mobile or web, just give me any programming challenge and I won't just fulfill it but I will have fun while doing it.</h3>\r\n                            </div>\r\n                            {/* <div className='home-content-section'>\r\n                                <h2>Skills:</h2>\r\n                                <ApexChart/>\r\n                            </div> */}\r\n                        </div>\r\n                    </div>\r\n                </main>\r\n                <Footer />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport NavigationBar from '../components/navigation/NavigationBar';\r\nimport Footer from '../components/navigation/Footer';\r\nimport './Projects.css';\r\nimport YouTube from 'react-youtube';\r\n\r\n\r\nclass Projects extends React.Component {\r\n    render() {\r\n        const opts = {\r\n            height: '390',\r\n            width: '640',\r\n            playerVars: { // https://developers.google.com/youtube/player_parameters\r\n              autoplay: 0\r\n            }\r\n          };\r\n        const redirectToSuperAndes = () => {\r\n\r\n            window.open('https://github.com/jdbarriosc/SuperAndes');\r\n        }\r\n        const redirectToAtPos = () => {\r\n\r\n            window.open('https://github.com/jdbarriosc/Atpos-Project');\r\n        }\r\n        const redirectToChicagoCabs = () => {\r\n\r\n            window.open('https://github.com/jdbarriosc/p3_201810');\r\n        }\r\n        return (\r\n            <div id='view'>\r\n                <NavigationBar />\r\n                <main>\r\n                    <div id='projects'>\r\n                        <div id='projects-content'>\r\n                            <div className='projects-content-section'>\r\n                                <h2>\r\n                                    TripBuilder (Project for university course)\r\n                                </h2>\r\n                                <h3>Developed a web platform for the creation of travel plans.</h3>\r\n                                <h3>Worked with SCRUM methodology. Controlled the planning, monitoring and documentation with TeamWork (www.teamwork.com), with continuous integration managed through Github, Maven, Jenkins and Sonarqube.</h3>\r\n                                <h3>Position:</h3>\r\n                                <h4>- Implementation of Back-end in Java, a JPA Persistence, using a REST API.</h4>\r\n                                <h4>- Collaboration in the design of the front using Master / Detail design patterns, with a horizontal display; finally developed in Angular by the rest of the team.</h4>\r\n                                <h4>- Creation of integration tests with post-man collections, and unit tests of logic and persistence with Junit.</h4>\r\n                                <h3>Results:</h3>\r\n                                <h4>- A functional and persistent page with local deployment was delivered.</h4>\r\n                                <br></br>\r\n                                <YouTube\r\n                                    videoId=\"9na7HuXStPw\"\r\n                                    opts={opts}\r\n                                    onReady={this._onReady}\r\n                                />\r\n                            </div>\r\n                            <div className='projects-content-section'>\r\n                                <h2>\r\n                                    ATpos (Project for university course)\r\n                                    <div className='projects-content-section-image'  >\r\n                                        <img src='/images/github.png' alt='github-link' onClick={redirectToAtPos}></img>\r\n                                    </div>\r\n                                </h2>\r\n                                <h3>Creation of the entire architecture, with the different software quality requirements (Availability, Ease of Modification, Performance, Security, Latency) of the ATpos platform.</h3>\r\n                                <h3>Position:</h3>\r\n                                <h4>- In this project the architecture views were generated in its entirety: Context Model, Domain Model, Deployment Model and Component Model, applying different detailed design patterns to achieve the different chosen ASRs.</h4>\r\n                                <h4>- Certain components were developed in Python and several active replicas were deployed in EC2 with a load balancer.</h4>\r\n                                <h4>- Load tests were performed with JMeter.</h4>\r\n                                <h4>- Authentication systems were developed using Auth0.</h4>\r\n                                <h4>- We created a simple Front for interaction with the system.</h4>\r\n                                <h3>Results:</h3>\r\n                                <h4>- The architecture of the entire system was delivered, which complied with the ASRs desired by the company.</h4>\r\n                                <h4>- A semi-functional system was delivered.</h4>\r\n\r\n                            </div>\r\n                            <div className='projects-content-section'>\r\n                                <h2>\r\n                                    SuperAndes (Project for university course)\r\n                                    <div className='projects-content-section-image'  >\r\n                                        <img src='/images/github.png' alt='github-link' onClick={redirectToSuperAndes}></img>\r\n                                    </div>\r\n                                </h2>\r\n                                <h3>Creation of the entire supermarket management system.</h3>\r\n                                <h3>Position:</h3>\r\n                                <h4>- All architecture and implementation in Java was performed.</h4>\r\n                                <h4>- The relational model was made, with restrictions and foreign keys, security levels were chosen to guarantee integrity, and finally indexes were applied to speed up the search time.</h4>\r\n                                <h3>Results:</h3>\r\n                                <h4>- A functional system was delivered guaranteeing atomicity at the time of persistence.</h4>\r\n                            </div>\r\n                            <div className='projects-content-section'>\r\n                                <h2>\r\n                                    Taxis of Chicago (Project for university course)\r\n                                    <div className='projects-content-section-image'  >\r\n                                        <img src='/images/github.png' alt='github-link' onClick={redirectToChicagoCabs}></img>\r\n                                    </div>\r\n                                </h2>\r\n                                <h3>Mapping the history of trips made by Chicago in 2016</h3>\r\n                                <h3>Position:</h3>\r\n                                <h4>- A graph was created containing all the corners of the streets of Chicago, whose arches represented the streets between them.</h4>\r\n                                <h4>- Analyzing the information provided on the routes made by the Chicago taxis in 2016 with different routes of the graphs, the different queries were found as busiest routes, all roads from one point to another, seeking to optimize the queries to the maximum .</h4>\r\n                                <h3>Results:</h3>\r\n                                <h4>- A functional program managed by console was delivered.</h4>\r\n                            </div>\r\n                            <div className='projects-content-section'>\r\n                                <h2>\r\n                                    Concurrent Servers and Confidentiality Tactics (Project for university course)\r\n                                </h2>\r\n                                <h3>Concurrent servers were created for different scenarios.</h3>\r\n                                <h3>Position:</h3>\r\n                                <h4>- For different scenarios delivered, different servers had to be created that, through different multithreading tactics (traffic lights, bags, buffers, etc.), should ensure both data integrity and efficiency.</h4>\r\n                                <h4>- Different confidentiality techniques had to be applied, using the different types of encryption and hashing for the communication protocol between the created servers and the clients.</h4>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </main>\r\n                <Footer />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Projects;","import React from 'react';\r\nimport { Switch, Route} from 'react-router-dom';\r\nimport Home from './views/Home';\r\nimport Projects from './views/Projects';\r\n\r\n\r\nfunction Routes() {\r\n    return (\r\n        <Switch>\r\n            <Route exact path='/' component={Home} />\r\n            <Route exact path='/projects' component={Projects} />\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Routes;","import React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Helmet } from 'react-helmet';\nimport Routes from './Routes.jsx';\n\nimport \"./App.css\";\n\n\nclass App extends React.Component {\n\n    render() {\n        return (\n            <BrowserRouter>\n                <Helmet>\n                    <title>Juan Diego Barrios</title>\n                </Helmet>\n                <Routes />\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}